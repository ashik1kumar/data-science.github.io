# -*- coding: utf-8 -*-
"""realestates20.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RWTUiXRbanaRpoAbeIt3hMpsTkQ1uadW
"""

import pandas as pd

house = pd.read_csv(r"D:\Users\ASHIK KUMAR\Downloads\projects on realestates\housedata.csv")

house.head()

house.info()

house.isnull().sum()

housing = house.dropna()

housing.isnull().sum()

housing['CHAS'].value_counts()

housing.describe()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import matplotlib.pyplot as plt

housing.hist(bins=50, figsize=(20,15))

"""##train test splitting"""

import numpy as np
def split_train_test(data, test_ratio):
  np.random.seed(42)
  shuffled = np.random.permutation(len(data))
  test_set_size = int(len(data) * test_ratio)
  test_indices = shuffled[:test_set_size]
  train_indices = shuffled[test_set_size:]
  return data.iloc[train_indices], data.iloc[test_indices]

train_set, test_set  = split_train_test(housing, 0.2)

print(f"Rows in train set: {len(train_set)}\nRows in test set: {len(test_set)}\n")

from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)
print(f"Rows in trsin set: {len(train_set)}\nRows in test set: {len(test_set)}\n")

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing['CHAS']):
  strat_train_set = housing.loc[train_index]
  strat_test_set = housing.loc[test_index]

strat_test_set['CHAS'].value_counts()

strat_train_set['CHAS'].value_counts()

# 95/7

# 376/28

"""### looking correlations


"""

corr_matrix = housing.corr()

corr_matrix['MEDV'].sort_values(ascending=False)

from pandas.plotting import scatter_matrix
attributes = ['MEDV', 'RM', 'ZN', 'LSTAT']
scatter_matrix(housing[attributes], figsize=(12, 8))

housing.plot(kind='scatter', x='RM', y='MEDV', alpha=0.8)

"""trying out attributes combinations"""

housing['TAXRM'] = housing['TAX']/housing['RM']

housing.head()

corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)

housing.plot(kind='scatter', x='TAXRM', y='MEDV', alpha=0.8)

housing = strat_train_set.drop('MEDV', axis=1)
housing_labels = strat_train_set['MEDV'].copy()

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy='median')
imputer.fit(housing)

imputer.statistics_

X = imputer.transform(housing)

housing_tr = pd.DataFrame(X, columns = housing.columns)

housing_tr.describe()

"""scikit learn design

creating a pipline
"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('std_scaler', StandardScaler()),
])

housing_num_tr = my_pipeline.fit_transform(housing_tr)

housing_num_tr.shape

"""selecting a desire model for real estates """

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
### model = LinearRegression()
model = DecisionTreeRegressor()
model.fit(housing_num_tr, housing_labels)

some_data = housing.iloc[:5]

some_labels = housing_labels.iloc[:5]

prepared_data = my_pipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)

"""### evaluating the model"""

from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt(mse)

rmse

"""cross validation"""

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring='neg_mean_squared_error', cv=10)
rmse_scores = np.sqrt(-scores)

rmse_scores

def print_scores(scores):
  print('Scores:', scores)
  print('Mean', scores.mean())
  print('Standard deviation', scores.std())

print_scores(rmse_scores)

from joblib import dump, load
dump(model, 'realestates.joblib')

